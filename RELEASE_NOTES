-- v?? --
* Threads::Thread thread wrapper added.
* Threads::Sync added for easy synchronizing master-slave threads.
* SharedPtrNotNULL const-fixes.
* support for intel compiler updated.
* build process v1.7.1 introduced.

-- v0.8.0 --
* average and standard deviation computation algorithm has been introduced.
* implemented algorithm for comaprison of floating points with a given precision.
* added two algorithms for addition of floating points with minimal loss of precission.
* new System::Math namespace is present.
* added DivingStack<> template container.
* moved some library internals to System::detail namespace.
* updated AtExit's code so that unregistering dynamic objects (dlclose() call) that registered to AtExit is will be possible.
* added Plugins namespace for handling plugins in external *.so files.
* few typos fixed.
* minor code/style fixes.

-- v0.7.1 --
* fixed issue with convertion from const in SharedPtrNotNULL<>.
* fixed issue with comparison operators in SharedPtrNotNULL<> - now only operators available in boost::shared_ptr<> are available.

-- v0.7.0 --
* OneInstanceAtOnce - guard class that ensures that only one instance of a given object is present at a given time in system.
* ignore<>() - helper that prevents warnings about unused variable (ex.: that is needed only in debug).
* fixed SharedPtrNotNULL API to have explicit back-to-shared_ptr<> convertion method.
* GlobalInit<> - secure, thread safe initializer of the libraries that need such before usage.
* SharedPtrNotNULL<> can now implicitly convert between pointers to derived -> base classes and non-const -> const pointers.

-- v0.6.0 --
* fixed remarks on intel's toolchain.
* added real-time timer showing time elapsed since its start.
* implemented helper for registration handlers for signals.
* file opening uses now O_CLOEXEC flag by default.
* implemented SharedPtrNotNULL template - boost::shred_ptr<> equivalent, that ensures that pointer is NOT NULL.
* implemented ScopedPtrCustom template - boost::scoped_ptr<> equivalent, that allows user-provided function to free pointer.
* likely.hpp implements compiler huristics for branches.
* added FunctionName.hpp with macro wrapping and setting SYSTEM_FUNCTION_NAME macro to return pretty-function name, when possible and funciton name as a fallback.
* added location inforamtion for all exception classes (new c-tor has been added).
* exceptions can now return their name (via RTTI) with getTypeName().
* fixed Backtrace's tests (tail-recursion on newer gcc versions).
* fixed race condition when initializing Singleton from multiple threads.
* Singleton is now Phoenix/Mayer's Singleton with thread-safe initialization and release.
* AtExit now allows registering new handlers from another handler (while executing).
* build_process v1.3.0 introduced.

-- v0.5.0 --
* *Enum::toInt() is now standard.
* exceptions thrown by library are slightly more verbose now.
* updated Auto* classes to allow "regular" copying as atuo_ptr<> does, in all situations.
* fixed resource leaks in ssignemnt for AutoVariable.
* providede Backtrace for clearting stack backtraces (usefull for exceptions).
* added Exceptions::* for creating own exceptions easily.

-- v0.4.3 --
* fixed convention in Exception.
* begin(), end(), size() are now static.
* fixed warning in assert in IterableEnum<> on some compilers.
* build_process v0.6.0 introduced.
* removed extra link reference to boost::threads.
